#!/usr/bin/env python

"""Generate a unique 160-bit hex key.

Usage: %(program)s [-d <device>] [-b] [-h]

Where:
    -d <device>
    --device <device>
       Draw random numbers from a random data source device other than /dev/urandom

    -b
    --batch
       Output only the CRYPT_KEY.
       
    --help
    -h
       Print this help message and exit.
"""


import binascii
import commands
import getopt
import os
import sys


batch = None
randomdev = '/dev/urandom'

program = sys.argv[0]

def usage(code, msg=''):
    print __doc__ % globals()
    if msg:
        print msg
    sys.exit(code)

try:
    opts, args = getopt.getopt(sys.argv[1:],
                               'bd:h',
                               ['batch',
                                'device=',
                                'help'])
except getopt.error, msg:
    usage(1, msg)

for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage(0)
    if opt in ('-d', '--device'):
        randomdev = arg
    elif opt in ('-b', '--batch'):
        batch = 1


try:
    import paths
except ImportError:
    pass


def keygen():
    # Use the kernel's random number generator if available.
    if os.path.exists(randomdev):
        key = open(randomdev,'rb').read(20)
    else:
        # Otherwise generate some pseudo-random data from the system
        # and use the SHA of resulting key as the key.
        import sha
        if not batch:
            # Warn user that use of a cryptographic random number
            # generator is preferred.
            warning = ("key generation on a system without a "
                       + randomdev + " device is not recommended!")
            print "WARNING:"
            print '*' * len(warning)
            print warning
            print '*' * len(warning)
            print
        unpredictable = ( "date",
                          "fstat",
                          "iostat",
                          "vmstat",
                          "finger",
                          "ps -la",
                          "netstat",
                          "uname -a",
                          "cat /etc/passwd",
                          "cat /etc/aliases",
                          "cat /proc/interrupts" )
        key_data = ''
        for i in unpredictable:
            if commands.getstatusoutput(i)[0] == 0:
                key_data = key_data + os.popen(i).read()
        key = sha.new(key_data + "key").digest()
    return binascii.hexlify(key)


def main():
    
    if not batch:
        print "Generating a unique, 160-bit private key, please wait a moment.."
        print

    key = keygen()

    if len(key) != 40:
        print "Oops, generated key is not 40-characters long, exiting!"
        sys.exit()

    print "CRYPT_KEY =", '"' + key + '"'

    if not batch:
        print
        print "Now paste the above line into your ~/.tmdarc file,"
        print "and make sure to keep your key secret!"


# This is the end my friend.
if __name__ == '__main__':
    main()
