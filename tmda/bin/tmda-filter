#!/usr/bin/env python

########################
# Delivery (server) mode
########################


import cStringIO
import os
import re
import rfc822
import stat
import string
import sys
import time

import paths
from TMDA import Cookie
from TMDA import Defaults
from TMDA import Util
from TMDA import Whitelist


# Read sys.stdin into a temporary variable for later access.
stdin = cStringIO.StringIO(sys.stdin.read())

# Collect the message's headers.
message_headers = rfc822.Message(stdin)


def logit(action_msg,date):
    """Write delivery statistics to the LOGFILE if enabled."""
    if Defaults.LOGFILE and os.environ.get('RECIPIENT'):
        try:
            logfile = open(Defaults.LOGFILE, 'a') # append to the file
            Date = time.asctime(time.localtime(date))
            From = message_headers.getheader('from',os.environ.get('SENDER'))
            To = os.environ.get('RECIPIENT')
            Subject = message_headers.getheader('subject', 'None')
            Size = str(len(stdin.read()))
            Action = action_msg
            actionstr = 'Actn: ' + Action
            sizestr = '(' + Size + ')'
            wsbuf = 78 - len(actionstr) - len(sizestr)
            
            # Write the log entry and then close the log.
            logfile.write('Date: ' + Date + '\n')
            logfile.write('From: ' + From + '\n')
            logfile.write('  To: ' + To + '\n')
            logfile.write('Subj: ' + Subject + '\n')
            logfile.write(actionstr + ' '*wsbuf + sizestr + '\n')
            logfile.write('\n')
            logfile.close()

        except IOError, error_msg:
            print error_msg
            sys.exit(Defaults.ERR_IO)


def verify_dated_cookie(dated_cookie):
    """Verify a dated cookie."""
    try:
        cookie_date = Cookie.get_cookie_date(dated_cookie)
    # Something went wrong; probably an invalid cookie.
    except:
        bounce_dated()
    # Cookie is valid, now lets check whether it has expired.
    else:
        now = time.time()
        current_date = '%d' % now
        if (cookie_date >= current_date):
            logit("OK good_dated_cookie",now)
            sys.exit(Defaults.ERR_OK)
        else:
            print "bounce dated call"
            bounce_dated()


def verify_sender_cookie(sender_address,sender_cookie):
    """Verify a sender cookie."""
    sender_address_cookie = Cookie.make_sender_cookie(sender_address)

    if (sender_cookie == sender_address_cookie):
        logit("OK good_sender_cookie", time.time())
        sys.exit(Defaults.ERR_OK)
    else:
        bounce_sender(sender_address,sender_address_cookie)


def bounce_dated():
    """Bounce the message back to sender with a new dated cookie."""
    current_date = time.time()
    expire_date = current_date + Util.seconds(Defaults.TIMEOUT)
    expire_utc_tuple = time.gmtime(expire_date)
    dated_cookie = Cookie.make_dated_cookie(current_date)
    bounce_message = make_dated_bounce(expire_utc_tuple,dated_cookie)
    logit("BOUNCE dated",current_date)
    print bounce_message
    sys.exit(Defaults.ERR_HARD)


def bounce_sender(sender_address,sender_address_cookie):
    """Bounce the message back to sender with their sender cookie."""
    bounce_message = make_sender_bounce(sender_address,sender_address_cookie)
    logit("BOUNCE sender",time.time())
    print bounce_message
    sys.exit(Defaults.ERR_HARD)


def make_dated_bounce(expire_utc_tuple,dated_cookie):
    """Create a 'dated' style nastygram to send back with the bounce."""
    timeout = Util.format_timeout(Defaults.TIMEOUT)
    utc_expire_date = time.asctime(expire_utc_tuple)
    tmda_url = Defaults.TMDA_HOMEPAGE

    nastygram = \
    """                                                                      
    This notice was generated by TMDA v%s %s.
    Your e-mail message was not accepted either because:
    
        1) The recipient didn't recognize your address, OR 
        2) The `dated' address you sent to was invalid or expired.
        
    You can contact me at the following address:
    
        <%s-dated-%s@%s>
        
    which will expire in %s (%s UTC).
    If you're just sending me SPAM/UCE, buzz off.
                                                                             
    Regards,
    %s"""% (Defaults.TMDA_VERSION, Defaults.TMDA_HOMEPAGE, Defaults.USERNAME,
            dated_cookie,Defaults.HOSTNAME, timeout, utc_expire_date,
            Defaults.FULLNAME)
        
    return nastygram


def make_sender_bounce(sender_address,sender_address_cookie):
    """Create a 'sender' style nastygram to send back with the bounce."""
            
    nastygram = \
    """                                                                      
    This notice was generated by TMDA v%s %s.
    Your e-mail message was not accepted either because:
    
        1) The recipient didn't recognize your address, OR 
        2) The `sender' address you sent to was invalid.
        
    You can contact me at the following address:
    
        <%s-sender-%s@%s>
        
    which will only work when you are sending me e-mail from:
                                                             
        <%s>
                                                          
    If you're just sending me SPAM/UCE, buzz off.
                                                                             
    Regards.
    %s"""% (Defaults.TMDA_VERSION,Defaults.TMDA_HOMEPAGE, Defaults.USERNAME,
            sender_address_cookie,Defaults.HOSTNAME, sender_address,
            Defaults.FULLNAME)
    
    return nastygram


######
# Main
######

def main():

    # Decide what to do with the incoming message based on environment
    # variables supplied by qmail-local.  See qmail-command(8) for more info.

    # EXT is the address extension, ext.
    ext = os.environ.get('EXT')         
    if ext:ext = string.lower(ext)

    # EXT2 is the portion of EXT following the first dash.
    ext2 = os.environ.get('EXT2') 
    if ext2:ext2 = string.lower(ext2)
    
    while 1:
        # Dated tag?
        if ext and (ext == 'dated' or re.match("^dated-\w+",ext)):
            dated_cookie = ext2
            verify_dated_cookie(dated_cookie)
        # Sender tag?
        elif ext and (ext == 'sender' or re.match("^sender-\w+",ext)):
            sender_cookie = ext2
            sender_address = os.environ.get('SENDER')
            verify_sender_cookie(sender_address,sender_cookie)
        # Is the sender in the WHITELIST?
        elif os.path.exists(Defaults.WHITELIST) and \
             Whitelist.match(message_headers):
            logit("OK whitelist_match", time.time())
            sys.exit(Defaults.ERR_OK)
        # They get the default tag.
        else:
            if Defaults.COOKIE_TYPE == 'dated':
                ext = 'dated'
            elif Defaults.COOKIE_TYPE == 'sender':
                ext = 'sender'
            elif Defaults.COOKIE_TYPE == 'bare':
                logit("OK bare", time.time())
                sys.exit(Defaults.ERR_OK)
            else:
                print "unknown cookie type"
                sys.exit(Defaults.ERR_CONFIG)


# This is the end my friend.
if __name__ == '__main__':
    main()
