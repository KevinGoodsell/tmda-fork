#!/usr/bin/env python

########################
# Delivery (server) mode
########################

"""Filter incoming messages on standard input.

Usage:  %(program)s [-c <file>] [-d] [-A <file>] [-R <file>] [-h]

Where:
	-c <file>
	--config-file <file>
	   Specify a different configuration file other than ~/.tmdarc.
	   
	-d
	--discard
	   Discard message if address is invalid instead of bouncing it.

        -A
	--confirm-accept-template <file>
	   Full pathname to a custom template for confirmation acceptance notices.

        -R
	--confirm-request-template <file>
	   Full pathname to a custom template for confirmation requests.
           
	--help
	-h
	   Print this help message and exit.
"""

import cStringIO
import getopt
import fileinput
import os
import popen2
import rfc822
import string
import sys
import time


discard = None
program = sys.argv[0]

def usage(code, msg=''):
    print __doc__ % globals()
    if msg:
        print msg
    sys.exit(code)
    
try:
    opts, args = getopt.getopt(sys.argv[1:],
                               'c:dA:R:h',['config-file=',
                                           'discard',
                                           'confirm-accept-template='
                                           'confirm-request-template='
                                           'help'])
except getopt.error, msg:
    usage(1, msg)

for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage(0)
    elif opt in ('-R', '--confirm-request-template'):
        os.environ['TMDA_CONFIRM_REQUEST_TEMPLATE'] = arg
    elif opt in ('-A', '--confirm-accept-template'):
        os.environ['TMDA_CONFIRM_ACCEPT_TEMPLATE'] = arg
    elif opt in ('-d', '--discard'):
	discard = 1
    elif opt in ('-c', '--config-file'):
        os.environ['TMDARC'] = arg


try:
    import paths
except ImportError:
    pass

from TMDA import Cookie
from TMDA import Defaults
from TMDA import Util


# Read sys.stdin into a temporary variable for later access.
stdin = cStringIO.StringIO(sys.stdin.read())

# Collect the message headers.
message_headers = rfc822.Message(stdin)
# Collect the message body.
message_body = stdin.read()

# Collect the entire message.
message = stdin.getvalue()
# Calculate the message size.
message_size = str(len(message_body))

# $SENDER is the envelope sender address.
envelope_sender = os.environ.get('SENDER')

# $RECIPIENT is the envelope recipient address.
# Use the X-Originally-To header if it exists.
envelope_recipient = (message_headers.getheader('x-originally-to') or
                      os.environ.get('RECIPIENT'))

# Collect the message's Subject: for later use.
subject = message_headers.getheader('subject', 'None')


def logit(action_msg,date):
    """Write delivery statistics to the LOGFILE if enabled."""
    if Defaults.LOGFILE and envelope_recipient:
        try:
            logfile = open(Defaults.LOGFILE, 'a') # append to the file
            Date = time.asctime(time.localtime(date))
            From = message_headers.getheader('from')
            if not From:From = envelope_sender
            To = envelope_recipient
            Subject = subject
            Action = action_msg
            actionstr = 'Actn: ' + Action
            sizestr = '(' + message_size + ')'
            wsbuf = 78 - len(actionstr) - len(sizestr)
            # Write the log entry and then close the log.
            logfile.write('Date: ' + Date + '\n')
            logfile.write('From: ' + From + '\n')
            logfile.write('  To: ' + To + '\n')
            logfile.write('Subj: ' + Subject + '\n')
            logfile.write(actionstr + ' '*wsbuf + sizestr + '\n')
            logfile.write('\n')
            logfile.close()
        except IOError, error_msg:
            print error_msg
            sys.exit(Defaults.ERR_IO)


def send_bounce(bounce_message, **vars):
    """Send a confirmation message back to the sender."""
    bounce_message = cStringIO.StringIO(bounce_message)
    message_headers = rfc822.Message(bounce_message)
    # Add some headers.
    if not vars.has_key('already_confirmed'):
        message_headers['Reply-To'] = vars['confirm_accept_address']
    message_headers['Return-Path'] = '<' + Defaults.BOUNCE_ENV_SENDER + '>'
    message_headers['To'] = envelope_sender
    message_headers['X-Delivery-Agent'] = Defaults.DELIVERY_AGENT
    message_body = bounce_message.read()
    inject = []
    inject.append(Defaults.INJECT)
    inject.append(envelope_sender)
    pipeline = popen2.popen2(inject)[1]
    pipeline.write(str(message_headers))
    pipeline.write('\n')
    pipeline.write(message_body)
    pipeline.close()
    

def bounce_cc(address):
    """Send a 'carbon copy' of the bounced message to address."""
    inject = Defaults.INJECT + ' ' + address # "qmail-inject recipient"
    pipeline = os.popen(inject, 'w')
    pipeline.write(message)
    pipeline.close()
    logit(inject,time.time())


def inject_pending(pathname,timestamp,pid):
    """Reinject then unlink a sucessfully confirmed message."""
    # Create the `confirm-done' address
    confirm_done_cookie = Cookie.make_confirm_cookie(timestamp,pid,'done')
    confirm_done_address = Defaults.USERNAME + '-confirm-done.' + \
                           confirm_done_cookie + '@' + Defaults.HOSTNAME
    curdate = time.strftime('%a, %d %b %Y %X -0000', time.gmtime(time.time()))
    try:
        fileobj = open(pathname,'r')
        message_headers = rfc822.Message(fileobj)
        message_body = fileobj.read()
        fileobj.close()
        # Add header.
        message_headers['X-Confirmed'] = curdate + ' ; by TMDA'
        inject = []
        inject.append(Defaults.INJECT)
        inject.append(confirm_done_address)
        pipeline = popen2.popen2(inject)[1]
        pipeline.write(str(message_headers))
        pipeline.write('\n')
        pipeline.write(message_body)
        pipeline.close()
    except IOError, error_msg:
        print error_msg
        sys.exit(Defaults.ERR_IO)
    os.unlink(pathname)
    sys.exit(Defaults.ERR_STOP)


def locate_pending(timestamp,pid):
    """Locate the message in the pending queue."""
    pendingdir = Defaults.DATADIR + 'pending'
    pending_message = timestamp + '.' + pid + '.msg'
    pending_message_pathname = pendingdir + '/' + pending_message
    if os.path.exists(pending_message_pathname):
        logit("CONFIRM accept " + pending_message, time.time())
        if Defaults.CONFIRM_ACCEPT_NOTIFY:
            bouncegen('accept')
        # Reinject the original, now confirmed message.
        inject_pending(pending_message_pathname,timestamp,pid)
    else:
        print "Sorry, your original message could not be located, please resend."
        sys.exit(Defaults.ERR_HARD)


def verify_confirm_cookie(confirm_cookie):
    """Verify a confirmation cookie."""
    confirm_cookie_split = string.split(confirm_cookie,'.')
    confirm_action = confirm_cookie_split[0]
    confirm_timestamp = confirm_cookie_split[1]
    confirm_pid = confirm_cookie_split[2]
    confirm_hmac = confirm_cookie_split[3]
    # pre-confirmation
    if confirm_action == 'accept':
        new_confirm_hmac = Cookie.confirmationmac(confirm_timestamp,
                                                  confirm_pid,'accept')
        # Accept the message only if the HMAC can be verified.
        if (confirm_hmac == new_confirm_hmac):
            locate_pending(confirm_timestamp,confirm_pid)
        else:
            logit("BOUNCE confirm_accept",time.time())
            print("Sorry, your confirmation is invalid.")
            sys.exit(Defaults.ERR_HARD)
    # post-confirmation
    elif confirm_action == 'done':
        new_confirm_hmac = Cookie.confirmationmac(confirm_timestamp,
                                                  confirm_pid,'done')
        # Accept the message only if the HMAC can be verified.
        if (confirm_hmac == new_confirm_hmac):
            logit("OK good_confirm_cookie", time.time())
            sys.exit(Defaults.ERR_OK)
        else:
            logit("BOUNCE confirm_done")
            print("Sorry, your confirmation is invalid.",time.time())
            sys.exit(Defaults.ERR_HARD)


def verify_dated_cookie(dated_cookie):
    """Verify a dated cookie."""
    # Save some time if the dated_cookie doesn't exist or is bogus.
    if not dated_cookie:
        if discard:
            sys.exit(Defaults.ERR_STOP)
        else:
            bouncegen('request')
    dated_cookie_split = string.split(dated_cookie,'.')
    if len(dated_cookie_split) != 2:
        if discard:
            sys.exit(Defaults.ERR_STOP)
        else:
            bouncegen('request')
    cookie_date = dated_cookie_split[0]
    datemac = dated_cookie_split[1]
    newdatemac = Cookie.datemac(cookie_date)
    # Accept the message only if the address has not expired *and* the HMAC
    # can be verified.
    now = time.time()
    if ((int(cookie_date) >= int('%d' % now)) and (datemac == newdatemac)):
        logit("OK good_dated_cookie",now)
        sys.exit(Defaults.ERR_OK)
    elif discard:
        sys.exit(Defaults.ERR_STOP)
    else:
        bouncegen('request')


def verify_sender_cookie(sender_address,sender_cookie):
    """Verify a sender cookie."""
    sender_address_cookie = Cookie.make_sender_cookie(sender_address)
    # Accept the message only if the HMAC can be verified.
    if (sender_cookie == sender_address_cookie):
        logit("OK good_sender_cookie", time.time())
        sys.exit(Defaults.ERR_OK)
    elif discard:
        sys.exit(Defaults.ERR_STOP)
    else:
        bouncegen('request')


def bouncegen(mode):
    """Bounce a message back to sender."""
    # Common variables.
    now = time.time()
    envelope_recipient = globals().get('envelope_recipient')
    envelope_sender = globals().get('envelope_sender')
    subject = globals().get('subject')
    original_message = globals().get('message')
    # Opional 'dated' address variables.
    if Defaults.DATED_TEMPLATE_VARS:
        dated_timeout = Util.format_timeout(Defaults.TIMEOUT)
        dated_expire_date = time.asctime(time.gmtime
                                         (now + Util.seconds(Defaults.TIMEOUT)))
        dated_cookie = Cookie.make_dated_cookie('%d' % now)
        dated_cookie_address = Defaults.USERNAME + '-dated-' + dated_cookie \
                               + '@' + Defaults.HOSTNAME
    # Optional 'sender' address variables.
    if Defaults.SENDER_TEMPLATE_VARS:
        sender_cookie = Cookie.make_sender_cookie(envelope_sender)
        sender_cookie_address = Defaults.USERNAME + '-sender-' + sender_cookie \
                                + '@' + Defaults.HOSTNAME
    if mode == 'accept':                # confirmation acceptance notices
        env_template = os.environ.get('TMDA_CONFIRM_ACCEPT_TEMPLATE')
        def_template = Defaults.CONFIRM_ACCEPT_TEMPLATE
        pkg_template = sys.prefix + '/share/tmda/confirm_accept..txt'
    if mode == 'request':               # request confirmations
        env_template = os.environ.get('TMDA_CONFIRM_REQUEST_TEMPLATE')
        def_template = Defaults.CONFIRM_REQUEST_TEMPLATE
        pkg_template = sys.prefix + '/share/tmda/confirm_request..txt'
        timestamp = str('%d' %now)
        pid = str(os.getpid())
        confirm_cookie = Cookie.make_confirm_cookie(timestamp,pid,'accept')
        confirm_accept_address = Defaults.USERNAME + '-confirm-accept.' + \
                                 confirm_cookie + '@' + Defaults.HOSTNAME
        pendingdir = Defaults.DATADIR + 'pending'
        pending_message = timestamp + '.' + pid + '.msg'
        # Create ~/.tmda/ and friends if necessary.
        if not os.path.exists(pendingdir):
            try:
                os.makedirs(pendingdir,0700) # stores the unconfirmed messages
            except IOError, error_msg:
                print error_msg
                sys.exit(Defaults.ERR_IO)
        # Write ~/.tmda/pending/TIMESTAMP.PID.msg
        message_headers['Return-Path'] = '<' + envelope_sender + '>'
        pending_contents = str(message_headers) + '\n' + message_body
        Util.writefile(pending_contents, pendingdir + '/' + pending_message)
        logit("CONFIRM pending " + pending_message, time.time())
    # Find the right template.
    if env_template and os.path.exists(env_template):
        right_template = env_template
    elif def_template and os.path.exists(def_template):
        right_template = def_template
    else:
        # must be installed from a package, so look in ../share/tmda/
        right_template = pkg_template
    # Create the message and the send it.
    bounce_message = Util.maketext(right_template,vars())
    if mode == 'accept':
        send_bounce(bounce_message,already_confirmed=1)
    if mode == 'request':
        if Defaults.BOUNCE_CONFIRM_CC:
            bounce_cc(Defaults.BOUNCE_CONFIRM_CC)
        send_bounce(bounce_message,confirm_accept_address = confirm_accept_address)
        sys.exit(Defaults.ERR_STOP)  


######
# Main
######

def main():

    # Decide what to do with the incoming message based on environment
    # variables supplied by qmail-local.  See qmail-command(8) for more info.

    # Get cookie type and value
    ext = os.environ.get('EXT')
    if ext:
        ext = string.lower(ext)
        ext_split = string.split(ext,'-')
        cookie_value = ext_split[-1]
        try:
            cookie_type = ext_split[-2]
        except IndexError:
            cookie_type = ext_split[-1]
            cookie_value = None
    else:
        cookie_type = None
        cookie_value = None
            
    # Extract the e-mail address from From:, and Reply-To:
    EnvelopeSender = string.lower(envelope_sender)
    From = message_headers.getaddr('from')[1]
    if From:From = string.lower(From)
    ReplyTo = message_headers.getaddr('reply-to')[1]
    if ReplyTo:ReplyTo = string.lower(ReplyTo)
    
    while 1:
        # Is the sender in the BLACKLIST?
        if os.path.exists(Defaults.BLACKLIST):
            blacklist_list = []
            blacklist_list = Util.file_to_list(Defaults.BLACKLIST,blacklist_list)
            if Util.findmatch(blacklist_list, EnvelopeSender,From,ReplyTo):
                logit("BOUNCE blacklist_match", time.time())
                if Defaults.BOUNCE_BLACKLIST_CC:
                    bounce_cc(Defaults.BOUNCE_BLACKLIST_CC)
                sys.exit(Defaults.ERR_STOP)
                pass

        # Confirm tag?
        if cookie_type == 'confirm':
            if not cookie_value:
                cookie_type = Defaults.COOKIE_TYPE
                pass
            else:
                verify_confirm_cookie(cookie_value)
                pass

        # Is the sender in the WHITELIST?
        if os.path.exists(Defaults.WHITELIST):
            whitelist_list = []
            whitelist_list = Util.file_to_list(Defaults.WHITELIST,whitelist_list)
            if Util.findmatch(whitelist_list, EnvelopeSender,From,ReplyTo):
                logit("OK whitelist_match", time.time())
                sys.exit(Defaults.ERR_OK)
                pass
            
        # Dated tag?
        if cookie_type == 'dated':
            verify_dated_cookie(cookie_value)
            pass
        
        # Sender tag?
        if cookie_type == 'sender':
            sender_address = globals().get('envelope_sender')
            verify_sender_cookie(sender_address,cookie_value)
            pass

        # They get the default tag.
        if Defaults.COOKIE_TYPE == 'dated':
            cookie_type = 'dated'
        elif Defaults.COOKIE_TYPE == 'sender':
            cookie_type = 'sender'
        elif Defaults.COOKIE_TYPE == 'bare':
            logit("OK bare", time.time())
            sys.exit(Defaults.ERR_OK)
        else:
            print "unknown cookie type"
            sys.exit(Defaults.ERR_CONFIG)


# This is the end my friend.
if __name__ == '__main__':
    main()
