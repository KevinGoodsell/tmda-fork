#!/usr/bin/env python

######################
# Sender (client) mode
######################

"""Tag and send outgoing messages.

Usage:  %(program)s [-c <file>] [-q] [-h]

Where:
	-c <file>
	--config-file <file>
	   Specify a different configuration file other than ~/.tmdarc.

        -q
        --qfilter
           Return 99 to qfilter so it will not run qmail-queue itself.

	--help
	-h
	   Print this help message and exit.
"""

import getopt
import os
import popen2
import rfc822
import string
import sys


program = sys.argv[0]
qfilter = None

def usage(code, msg=''):
    print __doc__ % globals()
    if msg:
        print msg
    sys.exit(code)
    
try:
    opts, args = getopt.getopt(sys.argv[1:],
                               'c:qh', ['config-file=','qfilter','help'])
except getopt.error, msg:
    usage(1, msg)

for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage(0)
    elif opt in ('-c', '--config-file'):
        os.environ['TMDARC'] = arg
    elif opt in ('-q', '--qfilter'):
        qfilter = 99


import paths
from TMDA import Cookie
from TMDA import Defaults
from TMDA import Util


def inject_message(address,message_headers,message_body):
    """Hand the message off to qmail-inject."""
    # See qmail-inject(8) for descriptions of these variables.
    os.environ['QMAILSUSER'] = os.environ['QMAILUSER']
    # popen2 avoids /bin/sh if you pass it a list.
    inject = []
    inject.append(Defaults.INJECT)
    inject.append(address)
    pipeline = popen2.popen2(inject)[1]
    pipeline.write(message_headers)
    pipeline.write('\n')
    pipeline.write(message_body)
    pipeline.close()


def send_bare(address,message_headers,message_body):
    """Send a message with an untagged address."""
    os.environ['QMAILUSER'] = Defaults.USERNAME
    inject_message(address,message_headers,message_body)


def send_dated(address,message_headers,message_body):
    """Send a message with a tagged (dated) address."""
    dated_address = Cookie.make_dated_address()
    address_split = string.split(dated_address,'@')
    username = address_split[0]
    hostname = address_split[1]
    os.environ['QMAILUSER'] = username
    os.environ['QMAILHOST'] = hostname
    inject_message(address,message_headers,message_body)


def send_sender(address,message_headers,message_body):
    """Send a message with a tagged (sender) address."""
    sender_address = Cookie.make_sender_address(address)
    address_split = string.split(sender_address,'@')
    username = address_split[0]
    hostname = address_split[1]
    os.environ['QMAILUSER'] = username
    os.environ['QMAILHOST'] = hostname
    inject_message(address,message_headers,message_body)


def send_exp(address,from_address,message_headers,message_body):
    """Send a message with an explicitly defined address."""
    address_split = string.split(from_address,'@')
    username = address_split[0]
    hostname = address_split[1]
    os.environ['QMAILUSER'] = username
    os.environ['QMAILHOST'] = hostname
    inject_message(address,message_headers,message_body)


def send_ext(address,extension,message_headers,message_body):
    """Send a message with a tagged (extension added) address."""
    os.environ['QMAILUSER'] = Defaults.USERNAME + '-' + extension
    inject_message(address,message_headers,message_body)


######
# Main
######

def main():

    message = sys.stdin

    x_tmda_over = None
    exp_from_address = None
    ext_extension = None
    
    # qmail-inject variables which are often the same regardless of
    # how the message will be tagged (unless overwritten later).
    os.environ['QMAILHOST'] = Defaults.HOSTNAME
    os.environ['QMAILINJECT'] = Defaults.INJECT_FLAGS
    os.environ['QMAILNAME'] = Defaults.FULLNAME
    
    # Header examination and manipulation.
    message_headers = rfc822.Message(message)

    header_to = message_headers.getaddrlist("to")
    header_cc = message_headers.getaddrlist("cc")
    header_bcc = message_headers.getaddrlist("bcc")
    # Add custom headers.
    message_headers['X-Delivery-Agent'] = Defaults.DELIVERY_AGENT
    # Read in the message body.
    message_body = message.read()
    
    # If running through qfilter, get recipient list from QMAILRCPTS.
    if os.environ.has_key('QMAILRCPTS'):
        address_list = string.split(string.lower
                                    (os.environ['QMAILRCPTS']),'\n')[:-1]
    else:
        # Downcase and then combine To:, Cc:, and Bcc: addresses into one list.
       address_list = []
       for list in header_to,header_cc,header_bcc:
           for a in list:
               address = string.lower(a[1])
               address_list.append(address)
               
    # Check for the `X-TMDA' override header.
    if message_headers.has_key('x-tmda'):
        x_tmda_over = 1
        x_tmda = message_headers.getheader('x-tmda')
        fields = string.split(x_tmda)
        if fields[0] == 'dated':
            address_cookie = fields[0]
            try:                        # check for timeout override
                os.environ['TMDA_TIMEOUT'] =  fields[1]
            except IndexError:
                pass
        elif fields[0] in ('bare','sender'):
            address_cookie = fields[0]
        elif fields[0] == 'exp':
            address_cookie = fields[0]
            exp_from_address = fields[1]
        elif fields[0] == 'ext':
            address_cookie = fields[0]
            ext_extension = fields[1]
        else:
            pass
        # Delete `X-TMDA' before sending.
        del message_headers['x-tmda']
    else:
        # Without `X-TMDA', we need to process the special-case files.
        bare_list = []
        if os.path.exists(Defaults.BARE_FILE):
            bare_list = Util.file_to_list(Defaults.BARE_FILE,bare_list)
        if Defaults.WHITELIST_TO_BARE and os.path.exists(Defaults.WHITELIST):
            bare_list = Util.file_to_list(Defaults.WHITELIST,bare_list)

        dated_list = []
        if os.path.exists(Defaults.DATED_FILE):
            dated_list = Util.file_to_list(Defaults.DATED_FILE,dated_list)

        sender_list = []
        if os.path.exists(Defaults.SENDER_FILE):
            sender_list = Util.file_to_list(Defaults.SENDER_FILE,sender_list)

        exp_list = []
        if os.path.exists(Defaults.EXP_FILE):
            exp_list = Util.file_to_list(Defaults.EXP_FILE,exp_list)
    
        ext_list = []
        if os.path.exists(Defaults.EXT_FILE):
            ext_list = Util.file_to_list(Defaults.EXT_FILE,ext_list)

    # If the address matches a special case, it is tagged accordingly,
    # otherwise it is tagged with the default cookie type.
    for address in address_list:
        # If `X-TMDA' is present we are done here.
        if x_tmda_over:
            pass                        

        elif Util.findmatch(bare_list,address):
            address_cookie = 'bare'

        elif Util.findmatch(dated_list,address):
            address_cookie = 'dated'
                    
        elif Util.findmatch(sender_list,address):
            address_cookie = 'sender'

        else:
            exp_match = Util.findmatch(exp_list,address)
            ext_match = Util.findmatch(ext_list,address)
        
            if exp_match:
                address_cookie = 'exp'
                if not exp_from_address:exp_from_address = exp_match
            elif ext_match:
                address_cookie = 'ext'
                if not ext_extension:ext_extension = ext_match
            else:
                address_cookie = Defaults.COOKIE_TYPE

        # The message is sent to each recipient separately so that
        # everyone gets the correct tag.  Make sure your MUA
        # generates its own Message-ID: and Date: headers so they
        # match on multiple recipient messages.
        if address_cookie == 'bare':
            send_bare(address,str(message_headers),message_body)
        elif address_cookie == 'dated':
            send_dated(address,str(message_headers),message_body)
        elif address_cookie == 'sender':
            send_sender(address,str(message_headers),message_body)
        elif address_cookie == 'exp':
            send_exp(address,exp_from_address,str(message_headers),message_body)
        elif address_cookie == 'ext':
            send_ext(address,ext_extension,str(message_headers),message_body)
        else:
            print "Unknown cookie type:",address_cookie
            sys.exit(Defaults.ERR_CONFIG)

    if qfilter:
        sys.exit(qfilter)
    else:
        sys.exit(Defaults.ERR_OK)


# This is the end my friend.
if __name__ == '__main__':
    main()
