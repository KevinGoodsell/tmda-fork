For crypto-cookie generation and verification, TMDA uses HMAC, which
is a mechanism for message authentication using cryptographic hash
functions such as SHA and MD5.

For all the relevant papers and RFCs see:
    <URL:http://www-cse.ucsd.edu/users/mihir/papers/hmac.html>

Dated Addresses:
----------------

The new format for a 'dated' address is:

    USERNAME-dated-DATE.DATEMAC@domain.dom

    (For example, jason-dated-988298746.9d619c@mastaler.com)

    DATE is seconds since the epoch in UTC, expressed as an integer.
  
    DATEMAC is a 24-bit HMAC of DATE generated with the user's
    private key.

Incoming 'dated' messages are accepted if:

    1.  DATE >= the current time (i.e, not yet expired) 

        *AND* 

    2.  DATEMAC is verified by matching it with a new HMAC generated
        against DATE with the user's private key.

    DATEMAC verification prevents any tampering with DATE.

Sender Addresses:
-----------------

The new format for a 'sender' address is:
    
    USERNAME-sender-SENDERMAC@domain.dom

    (For example, jason-sender-8c54ac@mastaler.com)

    SENDERMAC is a 24-bit HMAC of the sender's e-mail address
    generated with the user's private key.

Incoming 'sender' messages are accepted if:

    1.  SENDERMAC is verified by matching it with a new HMAC generated
        against the sender's e-mail address with the user's private key.

HMAC Advantages:
----------------

Using HMACs offers several advantages over the former use of block
cipher encryption without any loss of security:

* The amkCrypto package is no longer necessary as TMDA includes an
  HMAC implementation that uses Python's `sha' module for hashing.
  Thus, only the core Python distribution is needed to run TMDA.
  amkCrypto/OpenSSL compilation/installation difficulties proved to be
  the biggest stumbling block for new users of earlier TMDA releases.

* The resultant "cookies" are shorter.  (6 hex characters as compared
  to 16 for 'dated', and 6 hex characters as compared to 40 for 'sender')

* It is the right construction to be using from a cryptographic
  perspective.  (i.e, MACs were designed for exactly these type of
  message authentication tasks)

TMDA Security:
--------------

With HMACs, the length of the key determines how hard it is to "break"
the system, that is, find the key and be able to forge arbitrary
messages (create arbitrary email addresses, in this context).  With
this in mind, TMDA uses long (160-bit) random private keys.

The length of the MAC determines the likelihood that a random message
is a forgery.  If you use n bits in your MAC, the chance of this is 1
in 2**n. .  One way to try to sneak messages past TMDA would be to
simply pick a random string as the MAC and hope that it verified
correctly.  TMDA uses 24-bit MACs (3 bytes, 6 hex characters) which
means the chance of a successful forgery is 1 in 16,777,216.  Very
unlikely when you consider that to test a forged MAC, the attacker
must actually send you an e-mail message and wait for the result.

