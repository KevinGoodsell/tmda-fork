#!/usr/bin/env python
#
# Copyright (C) 2002 Gre7g Luterman <gre7g@wolfhome.com>
#
# This file is part of TMDA.
#
# TMDA is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.  A copy of this license should
# be included in the file COPYING.
#
# TMDA is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with TMDA; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# TODO: Perhaps a check should be put in for the various authentication schemes
# that the arguments are valid.  This is currently done at runtime within
# "Authenticate.py", but it may be better to check at least some of the
# values at compile-time anyway.

"""Pending queue manipulation tool.

Usage:  %(Program)s [OPTIONS]

Where:
    -b <path>
    --base-dir <path>
       Specify a path to TMDA.

    -c <file>
    --config-file <file>
       Specify a different configuration file other than ~/.tmda/config.

    -d <path>
    --display-dir <path>
       Specify a different directory for supplimental display files (icons and
       stylesheet).

    -f <authfile>
    --file-auth <authfile>
       Specify a different authentication file than the default.
       - The default is either <config_directory>/tmda-cgi, ~/.tmda/tmda-cgi
         for the authenticating user, or /etc/tmda-cgi, whichever is found
         first.

    -h
    --help
       Print this help message and exit.

    -i <path>
    --install-prefix <path>
       Specify path to tmda-cgi.py other than the current directory.

    -l <path>
    --virtual-lookup <path>
       Specify a path to virtual user lookup script.
       - The lookup script should take user login as a parameter and return
         <homedir>\\n<UID>\\n<GID>

    -m system-wide|single-user|no-su
    --mode system-wide|single-user|no-su
       Specify an operating mode.

    -n
    --no-su
       Compile a CGI to run in no-su mode.  Forces option "-m no-su".

    -p <checkpassword>
    --program-auth <checkpassword>
     ** Warning *********************************************************
     * The code used to do this is ALPHA stable, so do not rely on this *
     * functionality yet.                                               *
     ********************************************************************
       Specify checkpassword-style authentication
       - Must conform exactly to the checkpassword stardard
            http://cr.yp.to/checkpwd/interface.html
        - Any program that returns '0' (true) is acceptable as the command
          run by the checkpassword program upon successful authentication.
        - If "program" requires commandline switches, you must supply the
          command to be run upon successful authentication.
          If "program" does not, the default program (/usr)/bin/true is
          automatically appended if not specified.
        Examples: -p "/usr/sbin/checkpassword-pam -s id -- /bin/true"
                  -p /usr/local/vpopmair/vchkpw
                     (/usr/bin/true or /bin/true is automatically used) 

    -r protocol[://host[:port]][/dn]
    --remote-auth protocol[://host[:port]][/dn]
     ** Warning *********************************************************
     * The code used to do this is ALPHA stable, so do not rely on this *
     * functionality yet.                                               *
     ********************************************************************
        Host to connect to to check username and password.
        - Allowed protocols are:
            imap, imaps, apop, pop3, ldap
        - Host defaults to localhost
        - Port defaults to default port for the protocol
        - dn is manditory for ldap and must contain a '%%(user)s'
          identifying the username
        Examples: -r imap
                  -r imaps://myimapserver.net
                  -r pop3://mypopserver.net:2110
                  -r ldap://host.com/cn=%%(user)s,dc=host,dc=com

    -t <file>
    --target <file>
       Compile as a file other than ./tmda-cgi.

    -u <user>
    --user <user>
       Overrides the value of CGI_USER found in the configuration files.
       (Only affects system-wide mode.)

    -v <user>
    --virt_user <user>
       Specify real login name to use when user logs in as a virtual user.

If you specify no options, then the program will run in an interactive mode,
provide defaults for all values, and remember the new values you give it as
future defaults in case you need to recompile later.

The -i and -m options are seldom needed.  These options are for the rare cases
when a user other than root needs to compile the program for use in system-
wide mode.  For the resulting code to run correctly, root will have to chown
the resulting program.

Authentication is done by default using a file of the format username:password.
The default location for this file is chosen in the following order:

 1) File tmda-cgi in the same directory as the config file specified by the '-c'
    option (See below for discussion of -c) 
 2) File tmda-cgi in ~/.tmda/tmda-cgi for the user attempting to log in.
 3) File /etc/tmda-cgi

The password in this file should probably not be plaintext (although this is
allowed in files of mode 400 or 600), but should be generated by the included
script "genpass.py"

The -f, -p, and -r options are used to change the default authentication.  Be
warned that the options -p and -r are EXPERIMENTAL at this point.

When specifying -p, ensure that the value of -T is correct for your system.

The -B and -v options are used if you have virtual users on your system.
If you don't support virtual users, then leave these to the default settings.

The target may be specified on the command line with the -t option.

You can specify the location of the supplimental display files (icons and
stylesheet) with the -d option.  The default location is:

    ../display/

Use the -c option to specify a different location for your TMDA configuration
file.  You may use a "~" anywhere in the path to specify "the current user".
For example:

    %(Program)s -c /var/tmda/~/config

Will look for configuration files at /var/tmda/<user>/config instead of the
usual ~<user>/.tmda/config.

If no ~ is specified, compile will make a "best guess".
"""

import compileall
import getopt
import os.path
import pickle
import pwd
import re
import string
import sys

def Ask(Question, OptD, Str):
  "Ask for a member from the keyboard."
  while 1:
    print Question
    Temp = raw_input("(%s): " % OptD[Str]).strip()
    if Temp:
      Limit = re.search("\[(.+,.+)\]", Question)
      if Limit and not (Temp in Limit.group(1).split(", ")): continue
      OptD[Str] = Temp
    break

def Interactive(OptD):
  "Get options interactively."
  Ask("Location of Python interpreter (version 2.1+)", OptD, "Python")
  Ask("Target filename (and location) to compile CGI", OptD, "Target")
  Ask("Path to TMDA root directory", OptD, "Base")
  Ask("Path to tmda-cgi Python files", OptD, "Path")
  Ask('User config file location (or "None" for system default)', OptD,
    "Config")
  Ask("Authentication Type [file, program, remote, default]", OptD, "AuthType")
  if OptD["AuthType"] == "file":
    Ask('Authentication File (or "None" for system default)', OptD, "AuthFile")
    OptD["AuthArg"] = OptD["AuthFile"]
  elif OptD["AuthType"] == "program":
    Ask("""Authentication (checkpassword-style) program (full path and args)
 * For more details, see `config --help` option -p *""", OptD,
      "AuthProg")
    OptD["AuthArg"] = OptD["AuthProg"]
  elif OptD["AuthType"] == "remote":
    Ask('Authentication URI (protocol://host.domain.com[:port][/dn])', OptD,
      "AuthURI")
    OptD["AuthArg"] = OptD["AuthURI"]
  elif OptD["AuthType"] == "default":
    OptD["AuthArg"] = "None"
  Ask("Relative or absolute web path from CGI to display directory", OptD,
    "DispDir")
  Ask("CGI mode [system-wide, single-user, no-su]", OptD, "Mode")
  if OptD["Mode"] == "system-wide":
    Ask("User name to use while accessing session data", OptD, "User")
    Ask("""Real user name to use when login is a virtual user (or "None" if no virtual
users)""", OptD, "VUser")
  Ask('Path to a virtual user lookup script (or "None" if no virtual users)',
    OptD, "VLookup")
  print

Program = sys.argv[0]

Perm = 04755

# Keep options in one handy dictionary
OptD = {}
OptD["Python"]   = sys.executable
OptD["Target"]   = "tmda-cgi"
OptD["Base"]     = "../tmda/"
OptD["Path"]     = "./"
OptD["DispDir"]  = "../display/"
OptD["User"]     = "nobody"
OptD["AuthType"] = "default"
OptD["AuthFile"] = "None"
OptD["AuthProg"] = "/usr/sbin/checkpassword"
OptD["AuthURI"]  = "imap://localhost"
OptD["AuthArg"]  = "None"
OptD["VUser"]    = "vpopmail"
OptD["VLookup"]  = "/home/vpopmail/bin/getuserinfo-vpopmail.sh"
if os.geteuid():
  OptD["Mode"] = "single-user"
else:
  OptD["Mode"] = "system-wide"
if os.environ.has_key("TMDARC"):
  OptD["Config"] = os.environ["TMDARC"]
else:
  OptD["Config"] = "None"

def Usage(Code, Msg=""):
  "Show usage information and possibly an error message."
  print __doc__ % globals()
  if Msg: print Msg
  sys.exit(Code)

try:
  Opts, Args = getopt.getopt(sys.argv[1:], "c:d:f:i:l:m:nhp:r:t:u:",
    ["base-dir=", "config-file=", "display-dir=", "file-auth=", "help",
     "install-prefix=", "mode=", "no-su", "program-auth=", "remote-auth=",
     "target=", "user="])
except getopt.error, Msg:
  Usage(1, Msg)

# Handle any options passed in
for Opt, Arg in Opts:
  if Opt in ("-h", "--help"):
    Usage(0)
  elif Opt in ("-c", "--config-file"):
    OptD["Config"] = Arg
  elif Opt in ("-d", "--display-dir"):
    OptD["DispDir"] = Arg
  elif Opt in ("-f", "--file-auth"):
    OptD["AuthType"] = "file"
    OptD["AuthFile"] = Arg
    OptD["AuthArg"] = Arg
  elif Opt in ("-i", "--install-prefix"):
    OptD["Path"] = Arg
  elif Opt in ("-l", "--virtual-lookup"):
    OptD["Base"] = Arg
  elif Opt in ("-p", "--program-auth"):
    OptD["AuthType"] = "program"
    OptD["AuthProg"] = Arg
    OptD["AuthArg"] = Arg
  elif Opt in ("-r", "--remote-auth"):
    OptD["AuthType"] = "remote"
    OptD["AuthURI"] = Arg
    OptD["AuthArg"] = Arg
  elif Opt in ("-t", "--target"):
    OptD["Target"] = Arg
  elif Opt in ("-m", "--mode"):
    if not Arg in ("system-wide", "single-user", "no-su"):
      Usage(1, "Valid modes are system-wide, single-user, and no-su")
    OptD["Mode"] = Arg
  elif Opt in ("-n", "--no-su"):
    OptD["Mode"] = "no-su"
  elif Opt in ("-u", "--user"):
    OptD["User"] = Arg

# No options means interactive mode
if not len(Opts):
  # Try to load options from last interactive run
  try:
    F = open("compile.ini")
    OptD = pickle.load(F)
    F.close()
  except IOError:
    pass
  Break = 0
  try:
    Interactive(OptD)
  except KeyboardInterrupt:
    Break = 1
    print "\nSaving settings. Delete compile.ini to reset back to defaults."
  try:
    F = open("compile.ini", "w")
    pickle.dump(OptD, F)
    F.close()
  except IOError:
    pass
  if Break: sys.exit()

# Check that we're running in Python version 2.1 or higher
if sys.version.split()[0] < '2.1':
  print """Compile terminated.  tmda-cgi requires Python version 2.1 or higher.

Either install the latest version of Python or specify the appropriate Python
interpreter when you issue the compile command.  Instead of typing:

    $ ./compile <options>

Type:

    $ /usr/bin/python2 compile <options>

(Assuming that your Python 2.1+ can be found at /usr/bin/python2.)
The compiler will save the correct version of the Python interpreter and use it
when tmda-cgi is run."""
  sys.exit()

# Check that User is valid and unprivileged (system-wide mode only).
if OptD["Mode"] == "system-wide":
  try:
    if not pwd.getpwnam(OptD["User"])[2]:
      print """Compile terminated.  User may not be root.  Please specify a non-
privileged user with the -u option."""
      sys.exit()
  except KeyError:
    print """Compile terminated.  User not found.  Please specify a real, non-
privileged user with the -u option."""
    sys.exit()

OptD["Path"] = os.path.abspath(OptD["Path"])

if OptD["DispDir"][-1] != "/": OptD["DispDir"] += "/"
if OptD["Path"][-1] != "/": OptD["Path"] += "/"

if OptD["Mode"] == "no-su": Perm = 0755

# Create dirs.h
F = open("dirs.h", "w")
F.write("""
#define PYTHON  "%(Python)s"
#define INSTALL  "%(Path)s"
#define MODE     "TMDA_CGI_MODE=%(Mode)s"
#define USER     "TMDA_CGI_USER=%(User)s"
#define DISP_DIR "TMDA_CGI_DISP_DIR=%(DispDir)s"
#define BASE_DIR "TMDA_BASE_DIR=%(Base)s"
#define VUSER    "TMDA_VUSER=%(VUser)s"
""" % OptD)
if OptD["VLookup"] != "None":
  F.write("""#define VLOOKUP  "TMDA_VLOOKUP=%(VLookup)s"
""" % OptD)
if OptD["Config"] != "None":
  if OptD["Config"].find("~") >= 0:
    OptD["Config"] = string.replace(OptD["Config"], "/%s/" % os.environ["USER"], "/~/")
    print """NOTE:
tmda-cgi will look for config files at: %s
Where <user> will be replaced by the user's login name.
""" % string.replace(OptD["Config"], "/~/", "/<user>/")
  F.write("""#define TMDARC "TMDARC=%(Config)s"
""" % OptD)
if OptD["AuthArg"] != "None":
  print "Users will be authenticated using %(AuthType)s %(AuthArg)s" % OptD
  F.write("""#define AUTH_TYPE "TMDA_AUTH_TYPE=%(AuthType)s"
#define AUTH_ARG "TMDA_AUTH_ARG=%(AuthArg)s"
""" % OptD)
F.close()

print "Compiling..."

# Remove any old tmda-rc
try:
  os.unlink(OptD["Target"])
except: pass

# Compile tmda-cgi
os.system("gcc -include ./dirs.h %(Path)stmda-cgi.c -o %(Target)s" % OptD)

# Remove dirs.h
os.unlink("dirs.h")

# Set permissions
try:
  os.chmod(OptD["Target"], Perm)
except OSError, (ErrNo, StrError):
  print "Compile aborted.  Error #%d: %s" % (ErrNo, StrError)
  sys.exit()

# Compile Python code
compileall.compile_dir(OptD["Path"])

print "Compilation done."

# Unsafe authentication type warnings!
if OptD["AuthType"] == "remote":
  print """
     ** Warning *********************************************************
     * You have selected "remote" authentication.                       *
     *   The code used to do this is ALPHA stable, and not every        *
     * reportedly supported protocol has been tested, so do not rely on *
     * this functionality yet.                                          *
     ********************************************************************
"""
elif OptD["AuthType"] == "program":
  print """
     ** Warning *********************************************************
     * You have selected "program" authentication.                      *
     *   Initial testing seems to imply that this authentication method *
     * works properly, but the code used to do so is ALPHA stable, so   *
     * not relay on this functionality yet.
     ********************************************************************
"""
