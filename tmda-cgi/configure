#!/usr/bin/env python
#
# Copyright 2011 Kevin Goodsell <kevin-opensource@omegacrash.net>
#
# Based on the original script, Copyright 2002 Gre7g Luterman
# <gre7g@wolfhome.com>
#
# This file is part of TMDA.
#
# TMDA is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.  A copy of this license should
# be included in the file COPYING.
#
# TMDA is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with TMDA; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# TODO: Perhaps a check should be put in for the various authentication schemes
# that the arguments are valid.  This is currently done at runtime within
# "Authenticate.py", but it may be better to check at least some of the
# values at compile-time anyway.

import sys

# Python 2.5 or later
if sys.version_info < (2, 5):
    print >> sys.stderr, ('Python 2.5 or later is required! Current '
                          'version: %s' % sys.version)
    sys.exit(1)

import compileall
import optparse
import glob
import os.path
import re
import ConfigParser
import stat
try:
    import readline
except ImportError:
    pass

class ConfigItems(object):
    def __init__(self):
        self.python_interpreter = sys.executable
        self.binary_target      = '/usr/local/apache/cgi-bin/tmda.cgi'
        self.tmda_path          = '../tmda'
        self._display_dir       = '/display'
        self.auth_type          = 'remote'
        self.auth_uri           = 'pop3://localhost'
        self.auth_file          = 'None'
        self.auth_program       = '/usr/sbin/checkpassword'
        self.virtual_user       = 'vpopmail'
        self.virtual_lookup     = 'vpopmail1 /home/vpopmail/bin/vuserinfo ~'
        self.session_prefix     = '/tmp/TMDASession.'
        self.session_expire     = '300'
        self.cleanup_odds       = '0.01'
        self.compiler           = 'cc'
        self.config_file        = os.environ.get('TMDARC', 'None')
        if os.geteuid() == 0:
            self.mode           = 'system-wide'
        else:
            self.mode           = 'single-user'

    # Some properties:

    _trailing_slash = re.compile(r'/*$')
    def _set_display_dir(self, value):
        self._display_dir = self._trailing_slash.sub('', value)

    display_dir = property(lambda self: self._display_dir, _set_display_dir)

    def config_names(self):
        names = []
        for name in dir(self):
            if (not name.startswith('_') and
                isinstance(getattr(self, name), str)):
                names.append(name)

        return names

    def write(self, filename):
        config = ConfigParser.SafeConfigParser()
        # Don't convert to lowercase
        config.optionxform = str

        section = 'configure-parameters'
        config.add_section(section)

        for name in self.config_names():
            config.set(section, name, getattr(self, name))

        # The environment variables that are passed to tmda.cgi are included in
        # the config file for use by simple-server.
        section = 'environment-variables'
        config.add_section(section)

        config.set(section, 'TMDARC', self.config_file)
        config.set(section, 'TMDA_CGI_MODE', self.mode)
        config.set(section, 'TMDA_CGI_DISP_DIR', self.display_dir)
        config.set(section, 'TMDA_BASE_DIR', self.tmda_path)
        config.set(section, 'TMDA_SESSION_PREFIX', self.session_prefix)
        config.set(section, 'TMDA_SESSION_EXP', self.session_expire)
        config.set(section, 'TMDA_SESSION_ODDS', self.cleanup_odds)
        if self.auth_argument() != 'None':
            config.set(section, 'TMDA_AUTH_TYPE', self.auth_type)
            config.set(section, 'TMDA_AUTH_ARG', self.auth_argument())
        if self.virtual_lookup != 'None':
            config.set(section, 'TMDA_VUSER', self.virtual_user)
            config.set(section, 'TMDA_VLOOKUP', self.virtual_lookup)

        with open(filename, 'w') as f:
            config.write(f)

    def read(self, filename):
        config = ConfigParser.SafeConfigParser()
        config.read(filename)

        section = 'configure-parameters'

        for name in self.config_names():
            if config.has_option(section, name):
                setattr(self, name, config.get(section, name))

    def update(self, values):
        for name in self.config_names():
            if getattr(values, name, None) is not None:
                setattr(self, name, getattr(values, name))

    def permissions(self):
        if self.mode == 'no-su':
            return '711'
        else:
            return '6711'

    def split_binary_target(self):
        full_path = os.path.abspath(self.binary_target)
        return os.path.split(full_path)

    def auth_argument(self):
        if self.auth_type == 'remote':
            return self.auth_uri
        elif self.auth_type == 'file':
            return self.auth_file
        elif self.auth_type == 'program':
            return self.auth_program
        return 'None'

class InteractiveConfig(object):
    def __init__(self, config):
        self.config = config

        if 'readline' in globals():
            self.input = self._readline_input
            readline.set_completer_delims(' |=')
            readline.parse_and_bind('tab: complete')
        else:
            self.input = self._basic_input

    def configure(self):
        self.ask('Where is the Python interpreter?', 'python_interpreter',
                 self.executable_validator)
        self.ask('Where should the compiled program be installed? Enter the full\n'
                 'path AND filename. This should be in the CGI directory for your\n'
                 'web server.', 'binary_target')
        self.ask('Where is TMDA installed?', 'tmda_path',
                 self.confirm_validator(self.tmda_inst_validator))
        self.ask('Where are user TMDA configuration files located? ~ can be used as\n'
                 'a placeholder for the user\'s home directory. Use "None" to use\n'
                 'the default location.', 'config_file')
        self.ask('How will users be authenticated? May be file, program, remote,\n'
                 'or default.', 'auth_type',
                 self.choice_validator(['file', 'program', 'remote',
                                        'default']))

        # Different question for different authentication modes
        if self.config.auth_type == 'file':
            self.ask('Where is the password file?', 'auth_file',
                     self.confirm_validator(self.file_validator))
        elif self.config.auth_type == 'program':
            self.ask('What program or command should be used for authentication? (See\n'
                     'the --help output regarding the -p option for more details.)',
                     'auth_program')
        elif self.config.auth_type == 'remote':
            self.ask('What is the authentication URI? (protocol://host.domain[:port][/dn])',
                     'auth_uri')

        self.ask('What is the path to the display directory? This is discussed at\n'
                 'http://tmda.sourceforge.net/tmda-cgi/compile.html#Display',
                 'display_dir')
        self.ask('What mode should tmda-cgi run in? May be system-wide, single-user,\n'
                 'or no-su.', 'mode',
                 self.choice_validator(['system-wide', 'single-user', 'no-su']))
        self.ask('What is the virtual user stub and parameters for locating virtual\n'
                 'users? If you are not using virtual users, enter "None".',
                 'virtual_lookup')
        if (self.config.mode == 'system-wide' and
            self.config.virtual_lookup != 'None'):
            self.ask('What real user name should be used when a virtual user logs in?',
                     'virtual_user', self.confirm_validator(self.user_validator))
        self.ask('Where should temporary session files be saved? Enter a path and\n'
                 'file prefix.', 'session_prefix')
        self.ask('How long (in seconds) should session files live before they may be\n'
                 'cleaned up?', 'session_expire', self.seconds_validator)
        self.ask('What should the probability of cleaning session files be? (0.01 = 1%)',
                 'cleanup_odds', self.probability_validator)
        self.ask('What C compiler should be used?', 'compiler')

    def ask(self, question, conf_name, validate=None):
        if validate is None:
            validate = self._null_validator

        current = getattr(self.config, conf_name)
        while True:
            print question
            response = self.input(current)
            try:
                response = validate(response)
            except self.InvalidResponse, e:
                if e.args:
                    print e.args[0]
                # Use the last entered value when re-prompting
                current = response
            else:
                # Validation succeeded, break out
                break

        setattr(self.config, conf_name, response)

    @staticmethod
    def _insert_text(text):
        return lambda: readline.insert_text(text)

    def _readline_input(self, default):
        readline.set_startup_hook(self._insert_text(default))
        try:
            return raw_input('> ')
        finally:
            readline.set_startup_hook(None)

    def _basic_input(self, default):
        result = raw_input('(%s): ' % default)
        if result:
            return result
        else:
            return default

    # Response validation support:

    class InvalidResponse(ValueError):
        pass

    @staticmethod
    def _null_validator(value):
        return value

    def confirm_validator(self, validator):
        def _validator(value):
            try:
                value = validator(value)
                return value
            except self.InvalidResponse, e:
                if e.args:
                    print e.args[0]
                print 'Use this value anyway?'
                ans = self.input('no')
                if ans.lower() == 'yes':
                    return value
                raise self.InvalidResponse()

        return _validator

    @classmethod
    def _mode_includes(cls, filename, mode):
        try:
            st = os.stat(filename)
        except OSError, e:
            raise cls.InvalidResponse(e.args[1])

        return st.st_mode & mode == mode

    @classmethod
    def executable_validator(cls, filename):
        if cls._mode_includes(filename, stat.S_IXUSR | stat.S_IFREG):
            return filename
        else:
            raise cls.InvalidResponse('Not an executable file')

    @classmethod
    def file_validator(cls, filename):
        if cls._mode_includes(filename, stat.S_IFREG):
            return filename
        else:
            raise cls.InvalidResponse('Not a file')

    @classmethod
    def tmda_inst_validator(cls, tmda_dir):
        lib_dir = os.path.join(tmda_dir, 'TMDA')
        if os.path.isdir(lib_dir):
            return tmda_dir
        else:
            raise cls.InvalidResponse('Not a TMDA install dir (no TMDA/ '
                                      'subdir found)')

    @classmethod
    def choice_validator(cls, choices):
        def _validator(value):
            if value in choices:
                return value
            raise cls.InvalidResponse('Not one of the allowed choices')

        return _validator

    @classmethod
    def user_validator(cls, username):
        import pwd
        try:
            pwd.getpwnam(username)
        except KeyError:
            raise cls.InvalidResponse('No such user')

        return username

    @classmethod
    def seconds_validator(cls, value):
        try:
            i = int(value)
        except ValueError:
            raise cls.InvalidResponse('Not an integer value')
        if i < 0:
            raise cls.InvalidResponse('Must be non-negative')
        return value

    @classmethod
    def probability_validator(cls, value):
        try:
            f = float(value)
        except ValueError:
            raise cls.InvalidResponse('Not a numeric value')
        if f < 0.0 or f > 1.0:
            raise cls.InvalidResponse('Must be between 0 and 1')
        return value

def make_header_file(name, config):
    with open(name, 'w') as f:
        print >> f, '#define PYTHON    "%s"' % config.python_interpreter
        print >> f, '#define INSTALL   "%s"' % os.path.abspath('.')
        print >> f, '#define MODE      "%s"' % config.mode
        print >> f, '#define DISP_DIR  "%s"' % config.display_dir
        print >> f, '#define BASE_DIR  "%s"' % config.tmda_path
        print >> f, '#define SESS_PRE  "%s"' % config.session_prefix
        print >> f, '#define SESS_EXP  "%s"' % config.session_expire
        print >> f, '#define SESS_ODDS "%s"' % config.cleanup_odds
        print >> f, '#define TMDARC    "%s"' % config.config_file
        if config.virtual_lookup != 'None':
            print >> f, '#define VUSER     "%s"' % config.virtual_user
            print >> f, '#define VLOOKUP   "%s"' % config.virtual_lookup
        if config.auth_argument() != 'None':
            print >> f, '#define AUTH_TYPE "%s"' % config.auth_type
            print >> f, '#define AUTH_ARG  "%s"' % config.auth_argument()

def make_makefile(name, config):
    (binary_dir, binary_file) = config.split_binary_target()

    with open(name, 'w') as f:
        print >> f, '# This Makefile was automatically generated by ./configure.'
        print >> f, '# Do not edit by hand.'
        print >> f
        print >> f, 'DESTDIR ?= ' + binary_dir
        print >> f, 'CC = %s' % config.compiler
        print >> f
        print >> f, 'all: tmda.cgi'
        print >> f
        print >> f, 'tmda.cgi: tmda-cgi.c tmda-cgi.h'
        print >> f, '	$(CC) -Wall -I . tmda-cgi.c -o tmda.cgi'
        print >> f, '	chmod %s tmda.cgi' % config.permissions()
        print >> f
        print >> f, 'install: $(DESTDIR)/' + binary_file
        print >> f
        print >> f, '$(DESTDIR)/%s: tmda.cgi' % binary_file
        print >> f, '	cp -f tmda.cgi $(DESTDIR)'
        print >> f, '	chmod %s $(DESTDIR)/%s' % (config.permissions(),
                                                   binary_file)

class HelpFormatter(optparse.IndentedHelpFormatter):
    '''
    optparse's help formatters can't deal with preformatted text. They always
    re-wrap it. This is a simple formatter that just retains formatting for
    option help.
    '''

    def format_option(self, option):
        result = []

        opts = self.option_strings[option]
        result.append('%*s%s\n' % (self.current_indent, '', opts))

        for line in option.help.split('\n'):
            result.append('%*s%s\n' % (8, '', line))

        return ''.join(result)

def parse_arguments(args):
    parser = optparse.OptionParser(usage='usage: %prog [options]',
        description='Configures tmda-cgi for compiling.',
        epilog='If you specify no options, then the program will run in an '
               'interactive mode, provide defaults for all values, and '
               'remember the new values you give it as future defaults in '
               'case you need to recompile later.',
        add_help_option=False, formatter=HelpFormatter())

    # General options
    parser.add_option('-h', '--help', action='help',
        help='Print this help message and exit.')
    parser.add_option('-d', '--display-dir', metavar='DIR',
        help='Directory for supplemental files (e.g., icons, stylesheets).')
    parser.add_option('-e', '--session-expire', metavar='SECONDS',
        help='Age at which a session may be cleaned.')
    modes = ['system-wide', 'single-user', 'no-su']
    parser.add_option('-m', '--mode', choices=modes,
        help='Operating mode, one of: %s.' % ', '.join(modes))
    parser.add_option('-o', '--cleanup-odds',
        help='Chance of cleaning up session files.')
    parser.add_option('-s', '--session-prefix', metavar='PREFIX',
        help='Path/file prefix for session files.')
    parser.add_option('-t', '--target', dest='binary_target',
        help='Output name for the compiled program.')

    # Options describing the build/execution environment
    env_group = optparse.OptionGroup(parser, 'Environment Options',
        'These options describe the environment that tmda-cgi will build and '
        'run in.')

    env_group.add_option('-b', '--base-dir', dest='tmda_path', metavar='DIR',
        help='Path to TMDA.')
    env_group.add_option('-c', '--config-file', metavar='FILE',
        help='Path to TMDA configuration file. ~ expands to the username.')
    env_group.add_option('-C', '--cc', dest='compiler', metavar='NAME',
        help='The executable name of the C compiler to use.')
    env_group.add_option('-i', '--python-interpreter', metavar='PATH',
        help='Full path to the python interpreter.')

    parser.add_option_group(env_group)

    # Options for authentication
    auth_group = optparse.OptionGroup(parser, 'Authentication Options')

    auth_group.add_option('-f', '--file-auth', metavar='AUTHFILE', nargs=1,
        type='string', action='callback', callback=parse_auth_callback,
        callback_args=('file',),
        help='Authentication file location. If "None", the paths checked are:\n'
             '  <config_dir>/tmda-cgi\n'
             "  ~/.tmda/tmda-cgi       (using the authenticating user's home)\n"
             '  /etc/tmda-cgi')
    auth_group.add_option('-p', '--program-auth', metavar='CHECKPWD', nargs=1,
        type='string', action='callback', callback=parse_auth_callback,
        callback_args=('program',),
        help='A checkpassword-style authentication program.\n'
             '  - Must conform to http://cr.yp.to/checkpwd/interface.html\n'
             '  - Any program that returns 0 is acceptable as the command run by\n'
             '    CHECKPWD upon successful authentication.\n'
             '  - If CHECKPWD requires command line switches, you must supply the\n'
             '    command to be run upon successful authentication. If it does\n'
             '    not, the default program (/usr)/bin/true is automatically\n'
             '    appended.\n'
             'Examples: -p "/usr/sbin/checkpassword-pam -s id -- /bin/true"\n'
             '          -p /home/vpopmail/bin/vchkpw\n'
             '             (/usr/bin/true or /bin/true is automatically used)')
    auth_group.add_option('-r', '--remote-auth', metavar='URL', nargs=1,
        type='string', action='callback', callback=parse_auth_callback,
        callback_args=('remote',),
        help='URL for server-based authentication. Format is\n'
             'protocol[://host[:port]][/dn]\n'
             '  - Allowed protocols are:\n'
             '      imap, imaps, apop, pop3, ldap\n'
             '  - host defaults to localhost.\n'
             '  - port defaults to the default for the protocol.\n'
             '  - dn is mandatory for ldap and must contain a %(user)s placeholder\n'
             '    for the username.\n'
             'Examples: -r imap\n'
             '          -r imaps://myimapserver.net\n'
             '          -r pop3://mypopserver.net:2110\n'
             '          -r ldap://host.com/cn=%(user)s,dc=host,dc=com')

    parser.add_option_group(auth_group)

    # Options for virtual users
    virt_group = optparse.OptionGroup(parser, 'Virtual User Options')

    virt_group.add_option('-l', '--virtual-lookup', metavar='PATH',
        help='Stub and parameters for a virtual user lookup.\n'
             '  - This is generally "<stub> <program> <params...>" where <stub> is\n'
             '    the Python stub, <program> is the program that must be run to\n'
             '    feed the stub, and <params...> are any parameters needed by\n'
             '    <program>. Any parameter that is a ~ will be replaced with the\n'
             '    login name.\n'
             '  - Use "None" if your system does not support virtual users.')
    virt_group.add_option('-u', '--virtual-user',
        help='Real username to use when a virtual user logs in.')

    parser.add_option_group(virt_group)

    parser.set_defaults(auth_type=None)

    (options, arguments) = parser.parse_args(args)
    if arguments:
        parser.error('Unrecognized arguments: %s' % ', '.join(arguments))

    return options

def parse_auth_callback(option, opt_str, value, parser, auth_type):
    if parser.values.auth_type is not None:
        parser.error('Only one authentication option is allowed!')

    parser.values.auth_type = auth_type
    if auth_type == 'file':
        parser.values.auth_file = value
    elif auth_type == 'remote':
        parser.values.auth_uri = value
    elif auth_type == 'program':
        parser.values.auth_program = value

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    opts = parse_arguments(args)

    # Collect configuration values, first defaults...
    config = ConfigItems()
    # ...second, loaded from file...
    config.read('configure.ini')
    # ...and finally, from command line.
    config.update(opts)

    try:
        if not args:
            # No arguments, begin interactive mode
            InteractiveConfig(config).configure()
    except KeyboardInterrupt:
        print ('\nSaving settings. Delete configure.ini to reset back '
               'to defaults.')
        return 1
    finally:
        config.write('configure.ini')

    # Check TMDA version compatibility
    sys.path.insert(0, config.tmda_path)
    import CgiVersion
    CgiVersion.Test()

    # Write output files
    make_header_file('tmda-cgi.h', config)
    make_makefile('Makefile', config)

    # Compile Python code
    compileall.compile_dir('.')

    return 0

if __name__ == '__main__':
    sys.exit(main())
