#!/usr/bin/env python

# Simple web server for testing tmda-cgi

import sys
import os.path
import re
import socket
from BaseHTTPServer import HTTPServer
import CGIHTTPServer
from CGIHTTPServer import CGIHTTPRequestHandler

(directory, script) = os.path.split(sys.argv[0])
tmda_cgi_dir = os.path.abspath(os.path.join(directory, '..'))

if not os.path.exists(os.path.join(tmda_cgi_dir, 'configure.ini')):
    print >> sys.stderr, 'configure.ini not found. Run configure first.'
    sys.exit(1)

class RequestHandler(CGIHTTPRequestHandler):
    _path_matcher = re.compile(r'^.*/simple-server/www/display/(?P<tail>.*)$')
    def translate_path(self, path):
        # Special case for display/ paths. If the path doesn't exist in the
        # current directory, translate it to the display/ dir in tmda-cgi.
        translated = CGIHTTPRequestHandler.translate_path(self, path)
        if not os.path.exists(translated):
            m = self._path_matcher.match(translated)
            if m:
                return os.path.join(tmda_cgi_dir, 'display', m.group('tail'))

        return translated

os.chdir(os.path.join(tmda_cgi_dir, 'simple-server', 'www'))

class HTTPServerIPv6(HTTPServer):
    address_family = socket.AF_INET6

# This is mostly copied from BaseHTTPServer, modified to allow the bind address
# to be specified, to support IPv6, and to default to 127.0.0.1.
def test(HandlerClass = RequestHandler, protocol="HTTP/1.0"):

    if sys.argv[1:]:
        port = int(sys.argv[1])
    else:
        port = 8000

    if sys.argv[2:]:
        bindaddr = sys.argv[2]
    else:
        bindaddr = '127.0.0.1'

    server_address = (bindaddr, port)

    if ':' in bindaddr:
        ServerClass = HTTPServerIPv6
    else:
        ServerClass = HTTPServer

    HandlerClass.protocol_version = protocol
    httpd = ServerClass(server_address, HandlerClass)

    sa = httpd.socket.getsockname()
    print "Serving HTTP on", sa[0], "port", sa[1], "..."
    httpd.serve_forever()

test()
